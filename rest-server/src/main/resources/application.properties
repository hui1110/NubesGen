spring.main.banner-mode=off
spring.main.lazy-initialization=true
spring.mustache.check-template-location=false
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

# Those parameters are the same that the Azure Blob Storage Spring Boot starter uses.
# As it doesn't support GraalVM (yet), we are using the SDK directly at the moment, but use the same configuration
# so we can migrate easily later.
# See https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-starter-storage
# If the storage account name or the storage account key are empty, then telemetry won't be used.
# Otherwise, an anonymized JSON file of each generation will be stored in Azure Blob Storage, for statistical purposes.
azure.storage.account-name=changeme
azure.storage.account-key=
azure.storage.blob-endpoint=

spring.security.oauth2.client.provider.azure-active-directory.authorization-uri=https://login.microsoftonline.com/common//oauth2/v2.0/authorize
spring.security.oauth2.client.provider.azure-active-directory.jwk-set-uri=https://login.microsoftonline.com/common/discovery/v2.0/keys
spring.security.oauth2.client.provider.azure-active-directory.token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
spring.security.oauth2.client.provider.azure-active-directory.user-name-attribute=name
spring.security.oauth2.client.provider.azure-active-directory.user-info-uri=https://graph.microsoft.com/oidc/userinfo

spring.security.oauth2.client.registration.management.provider=azure-active-directory
spring.security.oauth2.client.registration.management.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.management.client-id=f95790e2-b24b-41a6-9a20-f3e52bfba138
spring.security.oauth2.client.registration.management.client-secret=abz8Q~F2o6X.MWrK62~EglxuUuFgu5_4aS_y.dpz
spring.security.oauth2.client.registration.management.scope[0]=https://graph.microsoft.com/User.ReadBasic.All
#spring.security.oauth2.client.registration.management.scope[0]=https://management.azure.com/user_impersonation
#spring.security.oauth2.client.registration.management.scope[1]=openid
#spring.security.oauth2.client.registration.management.scope[2]=profile
#spring.security.oauth2.client.registration.management.scope[3]=offline_access
spring.security.oauth2.client.registration.management.redirect-uri={baseScheme}://{baseHost}{basePort}{basePath}/login/oauth2/code/
